% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AMEND.R
\name{module_identification}
\alias{module_identification}
\title{Identify modules from a network}
\usage{
module_identification(
  network_layers,
  bipartite_networks = NULL,
  network_hierarchy = NULL,
  n = NULL,
  data = NULL,
  brw_attr = NULL,
  FUN = NULL,
  FUN_params = NULL,
  directed = FALSE,
  aggregate_layers = NULL,
  normalize = c("degree", "modified_degree"),
  k = 0.5,
  degree_bias = NULL,
  crosstalk_params = NULL,
  seed_weights = NULL,
  verbose = FALSE,
  in_parallel = FALSE,
  n_cores = NULL,
  eta = NULL
)
}
\arguments{
\item{network_layers, bipartite_networks}{Single network-like object (igraph, adjacency matrix, or edgelist) or a list of these. If a list, it must be named, with names matching category names in \strong{network_hierarchy}. If multiple layers are contained in a single object, the list name must include these layer names separated by "|". \strong{bipartite_networks} should contain the mappings between different layers. Elements in \strong{bipartite_networks} list can be set to "common", which will connect all common nodes between the designated layers. Third column of edgelists are assumed to be edge weights unless colname "weight" is present.}

\item{network_hierarchy}{A 2-column matrix representing an edgelist for the network hierarchy, where hierarchy vertices represent categories which categorize the network nodes. Or an object of class 'hierarchy' as a result from \code{create_network_hierarchy()}.}

\item{n}{Final module size which the algorithm will try to approximate. NULL to get maximum-scoring subnetwork.}

\item{data}{Named list of numeric vectors, a single numeric vector, a character string, or NULL (default). Used to calculate seeds values for RWR (with \strong{FUN} and \strong{FUN_params}). Names of list should match layer names. Numeric values must be named with the corresponding node name. If a string, this should be the vertex attribute name (for igraph inputs) containing the data. NULL gives uniform seed values within each layer.}

\item{brw_attr}{Similar format as \strong{data}. Contains values to be used in a biased random walk. Should contain non-negative values.}

\item{FUN}{Function, list of functions, or a character string denoting a default function ('binary', 'shift_scale', 'p_value', or 'exp'), to be applied to \strong{data} to compute seed values for RWR. Names of list must match layer names. NULL (default) applies no transformation of values in \strong{data}. Optional function arguments given in \strong{FUN_params}.}

\item{FUN_params}{List or list of lists, containing additional function arguments for functions given in \strong{FUN}. NULL (default) doesn't supply any additional function arguments.}

\item{directed}{Logical. Whether the input network should be treated as directed.}

\item{aggregate_layers}{NULL (default) or a list containing sets of layer names to aggregate after RWR but before node filtering. Set to NULL for no aggregation. The first layer in a set is taken as the primary layer, whose edges will be preferentially used during the node filtering step in AMEND.}

\item{normalize}{Adjacency matrix normalization method to construct transition matrix.}

\item{k}{Penalization factor for normalize="modified_degree". Must be non-negative, with larger values resulting in a greater penalty for node degree, in an effort to mitigate degree bias.}

\item{degree_bias}{A character vector or list, or NULL (default). The character vector denotes the layers to which the degree bias mitigation method will be applied. The list must contain this character vector of layers (named 'layers') and a numeric scalar (named 'gamma') between 0 and 1 denoting the strength of degree bias mitigation. The default gamma value is 0.2. Set to NULL for no degree bias adjustment.}

\item{crosstalk_params}{A named numeric vector containing the crosstalk parameters for each category in network hierarchy. If NULL (default), a uniform value of 0.5 is set. Hierarchicy categories not given in \emph{crosstalk_params} will be given this default value of 0.5.}

\item{seed_weights}{A list of named numeric vectors, or NULL (default). List elements should correspond to sibling sets of categories in network hierarchy. Values in each set must sum to one. NULL gives uniform values within each sibling set.}

\item{verbose}{Logical. Whether to print information on algorithm progress.}

\item{in_parallel}{Logical. Whether to run certain operations in parallel, using the \emph{parallel}, \emph{doParallel} and \emph{foreach} packages.}

\item{n_cores}{Numeric scalar or NULL (default). Number of cores to use during parallel processing. If NULL and in_parallel=TRUE, defaults to two-thirds the number of cores detected on machine.}

\item{eta}{Numeric scalar or NULL (default). Starting filtering rate for AMEND algorithm. If NULL, this is set automatically to approximate the user-specified final module size \emph{n}.}
}
\value{
a named list with the following elements:
\itemize{
\item module: igraph of the final module (i.e., subnetwork)
\item score: final module score
\item subnetworks: a list of node names contained in intermediate subnetworks
\item stats: data.frame of network and algorithm statistics
\item time: run time
\item input_params: list of input parameters
}
}
\description{
Given a network (or several networks, to be connected) with node-wise data, this function uses the \strong{AMEND} algorithm to identify a single module containing highly-connected nodes with large data values. \code{module_identification()} and \code{AMEND()} are aliases.
}
\note{
Uses \emph{node_specific_restart}=TRUE for \code{RWR()}, with \emph{node_connectivity_score} coming from \code{node_connectivity_score(..., inverse=TRUE, mode="core")}.
}
\section{Algorithm Overview}{


The AMEND algorithm iteratively performs Random Walk with Restart (RWR) to obtain node scores which are used to heuristically find a maximum-weight connected subgraph. This subgraph is input for the next iteration, and the process continues until the subgraph size is close to the user-specified size \strong{n} or there is no change in network between iterations. See the \href{https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10324253/}{manuscript} for more details.
}

\section{Network Hierarchy}{


\strong{AMEND} is powered by a generalized RWR algorithm that can analyze multilayer networks where nodes are categorized by overlapping factors organized hierarchically. This hierarchy is supplied by the user as a directed edeglist and governs the construction of the transition matrix for RWR, with information being shared more readily between layers that lie closer in the hierarchy.

The hierarchy can have an arbitrary number of levels, where each level is associated with a factor (e.g., tissue, molecule, data type). Each leaf in the hierarchy (i.e., category with no child categories, bottom level) corresponds to a layer in the multilayer network, and the nodes in a layer are defined by the categories of its ancestors in the hierarchy. See \code{\link[=create_network_hierarchy]{create_network_hierarchy()}} for more details.
}

\section{Network Inputs}{


Users can supply layers as separate network-like objects (igraph, adjacency matrix, or edgelist) in a named list, where names correspond to categories in hierarchy. Similar inputs can be given for bipartite mappings between layers, where list names denote the layer names to which the mapping will be applied, with multiple layer names separated by "|". Networks can be (un)weighted and/or (un)directed. A single, connected network will be constructed from the \strong{network_layers} and \strong{bipartite_networks} inputs (see \code{\link[=create_integrated_network]{create_integrated_network()}}).
}

\section{Seed Value and Transition Matrix Calculation}{


Seed values for RWR are computed from \strong{data}, \strong{FUN}, and \strong{FUN_params}. Users can also supply node-wise values in \strong{brw_attr} for a biased random walk, where larger values will increase transition probabilities to nodes during RWR. The \strong{brw_attr} argument can also be a character vector of node names. Continuous values for biased random walk will be generated for each node as an inverse function of distance to the given nodes.

Transition matrices can be created through classic column-normalization (\strong{normalize} = "degree") or through a modified column-normalization (\strong{normalize} = "modified_degree") which penalizes transitions to nodes as a function of node degree (to combat degree bias). See \code{\link[=transition_matrix]{transition_matrix()}} for more details on the transition matrix construction process.

The \strong{degree_bias} argument can further mitigate degree bias by applying a degree bias adjustment method to specific layers in the network (see \code{\link[=bistochastic_scaling]{bistochastic_scaling()}}).
}

\section{Aggregating Layers}{


In multilayer networks, there is the option to aggregate sets of layers after \code{\link[=RWR]{RWR()}} but prior to \code{\link[=solve_MWCS]{solve_MWCS()}}. For a given set of layers, the first layer listed is designated as the 'primary' layer. All nodes and edges of the primary layer will be kept in the aggregated network. Then, moving sequentially through the remaining layers in the set, edges (along with their adjacent nodes) are added only if at least one of its adjacent nodes is not already in the aggregated layer. RWR scores of common nodes will be averaged. This can be useful if certain layers only differ by their edge type (e.g., physical vs. functional interactions between proteins) and the user wants the module to only contain edges of a certain type.
}

\section{Additional Parameters}{


\strong{crosstalk_params} and \strong{seed_weights} are additional sets of parameters that allow fine control over diffusion dynamics during \code{\link[=RWR]{RWR()}}.

\strong{crosstalk_params} are parameters that control the amount of information shared between layers. They represent the probability of the random walker to jump from the current layer to another through a bipartite edge during RWR.

\strong{seed_weights} represent the relative weight to give to seeds values of a certain layer or sets of layers. These should be supplied for all sets of categories in hierarchy that share a common parent (i.e., siblings).
}

\examples{
# Attach igraph library
library(igraph)

# Inspect the multilayer network objects included in the package
multilayer_network # List object with 5 igraphs
interlayer_links 
multilayer_hierarchy # matrix representing a directed edgelist

# Inspect data to be mapped to nodes in multilayer network
# Represents p-values generated from runif
lapply(multilayer_data_runif, head)

crosstalk_params <- c(protdat = 0.2, phosphdat = 0.4, meta = 0.6)

seed_weights <- list(c(protdat = 0.4, phosphdat = 0.6), 
                     c(prot = 0.7, meta = 0.3),
                     c(prot2 = 0.7, meta2 = 0.3))

# Identify an active module from multilayer network
mod <- module_identification(network_layers = multilayer_network,
                            bipartite_networks = interlayer_links,
                            network_hierarchy = multilayer_hierarchy,
                            n = 50,
                            data = multilayer_data_runif,
                            FUN = "p_value",
                            normalize = "degree",
                            crosstalk_params = crosstalk_params,
                            seed_weights = seed_weights)
# Use alias 'AMEND()'
if(FALSE) {
mod <- AMEND(network_layers = multilayer_network,
             bipartite_networks = interlayer_links,
             network_hierarchy = multilayer_hierarchy,
             n = 50,
             data = multilayer_data_runif,
             FUN = "p_value",
             normalize = "degree",
             crosstalk_params = crosstalk_params,
             seed_weights = seed_weights)
}


}
\seealso{
\code{\link[=create_integrated_network]{create_integrated_network()}}, \link{create_network_hierarchy}, \code{\link[=transition_matrix]{transition_matrix()}}, \code{\link[=RWR]{RWR()}}, \code{\link[=solve_MWCS]{solve_MWCS()}}
}
