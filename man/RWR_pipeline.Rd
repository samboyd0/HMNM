% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RandomWalk.R
\name{RWR_pipeline}
\alias{RWR_pipeline}
\title{Pipeline for running Random Walk with Restart (RWR)}
\usage{
RWR_pipeline(
  network_layers,
  bipartite_networks = NULL,
  network_hierarchy = NULL,
  data = NULL,
  FUN = NULL,
  FUN_params = NULL,
  directed = FALSE,
  brw_attr = NULL,
  lcc = FALSE,
  normalize = c("degree", "modified_degree"),
  k = 0.5,
  crosstalk_params = NULL,
  degree_bias = NULL,
  restart = 0.5,
  seed_weights = NULL,
  node_specific_restart = FALSE,
  output = c("list", "vector")
)
}
\arguments{
\item{network_layers, bipartite_networks}{Single network-like object (igraph, adjacency matrix, or edgelist) or a list of these. If a list, it must be named, with names matching category names in \strong{network_hierarchy}. If multiple layers are contained in a single object, the list name must include these layer names separated by "|". \strong{bipartite_networks} should contain the mappings between different layers. Elements in \strong{bipartite_networks} list can be set to "common", which will connect all common nodes between the designated layers.}

\item{network_hierarchy}{A 2-column matrix representing an edgelist for the network hierarchy, where hierarchy vertices represent categories which categorize the network nodes. Or an object of class 'hierarchy' as a result from \code{create_network_hierarchy()}.}

\item{data}{Named list of numeric vectors, a single numeric vector, a character string, or NULL (default). Used to calculate seeds values for RWR (with \strong{FUN} and \strong{FUN_params}). Names of list should match layer names. Numeric values must be named with the corresponding node name. If a string, this should be the vertex attribute name (for igraph inputs) containing the data. NULL gives uniform seed values within each layer.}

\item{FUN}{Function, list of functions, or a character string denoting a default function ('binary', 'shift_scale', 'p_value', or 'exp'), to be applied to \strong{data} to compute seed values for RWR. Names of list must match layer names. NULL (default) applies no transformation of values in \strong{data}. Optional function arguments given in \strong{FUN_params}.}

\item{FUN_params}{List or list of lists, containing additional function arguments for functions given in \strong{FUN}. NULL (default) doesn't supply any additional function arguments.}

\item{directed}{Logical. Whether the input network should be treated as directed.}

\item{brw_attr}{Similar format as \strong{data}. Contains values to be used in a biased random walk. Should contain non-negative values.}

\item{lcc}{Logical. Whether to take the largest connected component of the resulting network.}

\item{normalize}{Adjacency matrix normalization method to construct transition matrix.}

\item{k}{Penalization factor for normalize="modified_degree". Must be non-negative, with larger values resulting in a greater penalty for node degree, in an effort to mitigate degree bias.}

\item{crosstalk_params}{A named numeric vector containing the crosstalk parameters for each category in network hierarchy. If NULL (default), a uniform value of 0.5 is set. Hierarchicy categories not given in \emph{crosstalk_params} will be given this default value of 0.5.}

\item{degree_bias}{A character vector or list, or NULL (default). The character vector denotes the layers to which the degree bias mitigation method will be applied. The list must contain this character vector of layers (named 'layers') and a numeric scalar (named 'gamma') between 0 and 1 denoting the strength of degree bias mitigation. The default gamma value is 0.2. Set to NULL for no degree bias adjustment.}

\item{restart}{Restart probability. Larger values give more weight to seed values in RWR.}

\item{seed_weights}{A list of named numeric vectors, or NULL (default). List elements should correspond to sibling sets of categories in network hierarchy. Values in each set must sum to one. NULL gives uniform values within each sibling set.}

\item{node_specific_restart}{Logical. Whether to use node-specific restart probabilities based around \strong{restart} and inversely proportional to node coreness.}

\item{output}{"list" for a list of RWR scores separated by network layer. "vector" for a single vector of all RWR scores.}
}
\value{
a numeric vector or a list of numeric vectors
}
\description{
\code{RWR_pipeline()} takes as input a mono- or multi-layer network, constructs a transition matrix, and then performs RWR. Resulting node scores can be returned as a vector or a list with elements containing scores from each layer.
}
\examples{
# Attach igraph package
library(igraph)

# Unique node names in 'simple_network'
uniq_names <- unique(c(simple_network[,1], simple_network[,2]))

# Generate random data simulating Fold Changes
fold_changes <- rexp(length(uniq_names))
names(fold_changes) <- uniq_names

# Run the RWR pipeline
res <- RWR_pipeline(network_layers = simple_network, 
                    data = fold_changes, 
                    FUN = function(x) abs(log(x)),
                    restart = 0.75,
                    output = "vector")
head(res)


}
\seealso{
\code{\link[=create_integrated_network]{create_integrated_network()}}, \code{\link[=create_network_hierarchy]{create_network_hierarchy()}}, \code{\link[=transition_matrix]{transition_matrix()}}, \code{\link[=RWR]{RWR()}}
}
