% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_integrated_network.R
\name{create_integrated_network}
\alias{create_integrated_network}
\title{Create an integrated network}
\usage{
create_integrated_network(
  network_layers,
  bipartite_networks = NULL,
  network_hierarchy = NULL,
  data = NULL,
  FUN = NULL,
  FUN_params = NULL,
  directed = FALSE,
  brw_attr = NULL,
  error_metric = NULL,
  lcc = FALSE,
  in_parallel = FALSE,
  n_cores = NULL
)
}
\arguments{
\item{network_layers, bipartite_networks}{Single network-like object (igraph, adjacency matrix, or edgelist) or a list of these. If a list, it must be named, with names matching category names in \strong{network_hierarchy}. If multiple layers are contained in a single object, the list name must include these layer names separated by "|". \strong{bipartite_networks} should contain the mappings between different layers. Elements in \strong{bipartite_networks} list can be set to "common", which will connect all common nodes between the designated layers. Third column of edgelists are assumed to be edge weights unless colname "weight" is present.}

\item{network_hierarchy}{A 2-column matrix representing an edgelist for the network hierarchy, where hierarchy vertices represent categories which categorize the network nodes. Or an object of class 'hierarchy' as a result from \code{create_network_hierarchy()}.}

\item{data}{Named list of numeric vectors, a single numeric vector, a character string, or NULL (default). Used to calculate seeds values for RWR (with \strong{FUN} and \strong{FUN_params}). Names of list should match layer names. Numeric values must be named with the corresponding node name. If a string, this should be the vertex attribute name (for igraph inputs) containing the data. NULL gives uniform seed values within each layer.}

\item{FUN}{Function, list of functions, or a character string denoting a default function ('binary', 'shift_scale', 'p_value', or 'exp'), to be applied to \strong{data} to compute seed values for RWR. Names of list must match layer names. NULL (default) applies no transformation of values in \strong{data}. Optional function arguments given in \strong{FUN_params}.}

\item{FUN_params}{List or list of lists, containing additional function arguments for functions given in \strong{FUN}. NULL (default) doesn't supply any additional function arguments.}

\item{directed}{Logical. Whether the input network should be treated as directed.}

\item{brw_attr}{Similar format as \strong{data}. Contains values to be used in a biased random walk. Should contain non-negative values.}

\item{error_metric}{Similar format as \strong{data}. A measure of uncertainty associated with values in \emph{data}. Used to set seed weights-in AMEND algorithm-in a (hopefully) smart and automatic way. The higher the average error of a layer, the lower the weight given to the seed vector of that layer. NULL (default) translates to uniform seed weights or user-supplied seed weights.}

\item{lcc}{Logical. Whether to take the largest connected component of the resulting network.}

\item{in_parallel}{Logical. Whether to run certain operations in parallel, using the \emph{parallel}, \emph{doParallel} and \emph{foreach} packages.}

\item{n_cores}{Numeric scalar or NULL (default). Number of cores to use during parallel processing. If NULL and in_parallel=TRUE, defaults to two-thirds the number of cores detected on machine.}
}
\value{
A named list:
\itemize{
\item network: the integrated network of class 'igraph' and 'HMNMgraph'
\item hierarchy: the network hierarchy of class 'igraph' and 'hierarchy'
}
}
\description{
Create an integrated network from either a list of network objects (igraph, adjacency matrix, or edgelist) or a single network object. Multilayer networks must have the \strong{network_hierarchy} argument specified.
}
\details{
\code{create_integrated_network()} constructs a single- or multi-layer network object from one or more distinct network objects (igraph, adjacency matrix, or edgelist). For multilayer networks, a network hierarchy must be supplied. Networks can be (un)weighted and/or (un)directed.

The hierarchy can have an arbitrary number of levels, where each level is associated with a factor (e.g., tissue, molecule, data type). Each leaf in the hierarchy (i.e., category with no child categories) corresponds to a layer in the multilayer network, and the nodes in a layer are defined by the categories of its ancestors in the hierarchy.

Layers are connected with mappings given in \strong{bipartite_networks}. When any input network object has nodes from more than one layer, additional information is required to associate each node in that network object with a specific layer. These requirements differ depending on the network type. For igraphs, there must be a 'layer' vertex attribute containing the layer names of each node. For adjacency matrices, there must be a 'layer' attribute in the same order as rows/columns. For edgelists, there must be two additional columns, "layer1" and "layer2", containing the layer names of nodes in column 1 and 2, respectively.

Seed values for RWR are computed from \strong{data}, \strong{FUN}, and \strong{FUN_params}. Users can also supply node-wise values in \strong{brw_attr} for a biased random walk, where larger values will increase transition probabilities to nodes during RWR.
}
\examples{
# Attach igraph package
library(igraph)

# Inspect the multilayer network objects included in the package
multilayer_network # List object with 5 igraphs
interlayer_links 
multilayer_hierarchy # matrix representing a directed edgelist

# Inspect data to be mapped to nodes in multilayer network
# Represents p-values generated from runif
lapply(multilayer_data_runif, head)

# Construct an integrated multilayer network from 
#   network objects ('network_layers' arg) and bipartite mappings ('bipartite_networks' arg)
net <- create_integrated_network(network_layers = multilayer_network,
                                 bipartite_networks = interlayer_links,
                                 network_hierarchy = multilayer_hierarchy,
                                 data = multilayer_data_runif,
                                 FUN = "p_value")
class(net$network)
class(net$hierarchy)

}
\seealso{
\code{\link[=create_network_hierarchy]{create_network_hierarchy()}}
}
